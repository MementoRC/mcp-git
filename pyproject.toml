[project]
name = "mcp-server-git"
version = "0.6.3"
description = "A Model Context Protocol server providing tools to read, search, and manipulate Git repositories programmatically via LLMs"
readme = "README.md"
requires-python = ">=3.10"
authors = [{ name = "Anthropic, PBC." }]
maintainers = [{ name = "David Soria Parra", email = "davidsp@anthropic.com" }]
keywords = ["git", "mcp", "llm", "automation"]
license = { text = "MIT" }
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
]
dependencies = [
    "click>=8.1.7",
    "gitpython>=3.1.43",
    "mcp>=1.0.0",
    "pydantic>=2.0.0",
    "aiohttp>=3.8.0",
    "python-dotenv>=1.0.0",
]

[project.scripts]
mcp-server-git = "mcp_server_git:main"
mcp-server-git-simple = "mcp_server_git.server_simple:main_cli"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"


[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
pythonpath = ["src"]
addopts = "-v --tb=short"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "e2e: marks tests as end-to-end tests (deselect with '-m \"not e2e\"')",
    "ci_skip: marks tests to skip in CI environment",
    "mcp_verification: tests that replicate manual MCP verification process",
    "phase1: basic git operations (status, log, diff)",
    "phase2: GitHub API operations (list PRs, get details, status)",
    "phase3: advanced git operations (show, security validation)",
    "phase4: error handling and edge cases",
    "requires_github_token: tests that require GitHub API access"
]

[tool.ruff]
# Pin to CI-compatible settings for ruff 0.8.0
target-version = "py310"
line-length = 88

[tool.ruff.format]
# Ensure consistent formatting across ruff versions
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.pixi.project]
channels = ["conda-forge"]
platforms = ["linux-64", "osx-64", "osx-arm64", "win-64"]

[tool.pixi.dependencies]
python = ">=3.10"
psutil = ">=5.9.0"

[tool.pixi.pypi-dependencies]
mcp-server-git = { path = ".", editable = true }

[tool.pixi.feature.dev.dependencies]
pytest = ">=8.0.0"
pytest-asyncio = ">=0.21.0"
pytest-cov = ">=4.0.0"
pytest-timeout = ">=2.1.0"
ruff = ">=0.7.3"
pre-commit = "*"

[tool.pixi.feature.dev.pypi-dependencies]
pyright = ">=1.1.389"

[tool.pixi.environments]
dev = ["dev"]

[tool.pixi.tasks]
test = "pytest tests/ -v --tb=short"
test-unit = "pytest tests/unit/ -v"
test-integration = "pytest tests/integration/ -v"
test-e2e = "pytest tests/ -k 'e2e' -v"
test-cov = "pytest tests/ --cov=src/mcp_server_git --cov-report=html --cov-report=term"
lint = "ruff check src/ tests/ --select=F,E9"
lint-fix = "ruff check --fix src/ tests/"
format = "ruff format src/ tests/"
format-check = "ruff format --check src/ tests/"
typecheck = "pyright src/"
quality = { depends-on = ["test", "lint", "typecheck"] }
pre-commit = "pre-commit run --all-files"
install-pre-commit = "pre-commit install"
clean = "rm -rf __pycache__ .pytest_cache .coverage htmlcov .ruff_cache"
serve = "python -m mcp_server_git"
serve-simple = "python -m mcp_server_git.server_simple"
mcp-server = { cmd = "python -m mcp_server_git", env = { PYTHONPATH = "src" } }
mcp-server-debug = { cmd = "python -m mcp_server_git -vv --enable-file-logging", env = { PYTHONPATH = "src", LOG_LEVEL = "DEBUG" } }
install-editable = "pip install -e ."
